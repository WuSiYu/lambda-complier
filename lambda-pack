#!/usr/bin/env python3

import sys, pickle

from scanner import get_scanner
from parser import get_parser, parse, dump_ast
from ast_execute import InterpreterEnv

if len(sys.argv) != 3:
    print("Usage:", sys.argv[0], "<input_file> <output_file>")
    sys.exit(1)

scanner_tuple = get_scanner()
parser_tuple = get_parser()

source_code = ""
try:
    with open(sys.argv[1], 'r') as f:
        source_code = f.read()
except Exception as e:
    print("ERROR: read from input_file failed:", e.__class__.__name__, e)
    sys.exit(1)


# AST is a function contains a "function object tree", which bind with the input
AST = parse(scanner_tuple, parser_tuple, source_code)
if not AST:
    print("ERROR: parse failed, abort")
    sys.exit(1)


# the env object is a method set and environment for intermediate-code generation
env = InterpreterEnv()

# call AST with env
try:
    env.receive(AST(env=env))
except Exception as e:
    print("ERROR: runable function list gererate failed:", e.__class__.__name__, e)
    sys.exit(1)


# save loader and env object to a file
LOADER = """#!/bin/sh
/usr/bin/python3 -c "
class InterpreterEnv_Var():
    def __repr__(self):
        return repr(self.val)
class InterpreterEnv:
    def _get(self, v):
        return v.val if hasattr(v, 'val') else v
    def _assign(self, n1, n2):
        n1.val = self._get(n2)
    def _conv(self, n1, n2, n3, n4):
        if n2 == 'int':
            n1.val = int(self._get(n3))
        if n2 == 'float':
            n1.val = float(self._get(n3))
        else:
            raise NotImplementedError()
    def _plus(self, n1, n2, n3):
        n1.val = self._get(n2) + self._get(n3)
    def _minus(self, n1, n2, n3):
        n1.val = self._get(n2) - self._get(n3)
    def _multiply(self, n1, n2, n3):
        n1.val = self._get(n2) * self._get(n3)
    def _divide(self, n1, n2, n3):
        n1.val = self._get(n2) // self._get(n3)
    def _fdivide(self, n1, n2, n3):
        n1.val = self._get(n2) / self._get(n3)
    def _cmp(self, n1, n2, n3):
        if n2 == '>': return self._get(n1) > self._get(n3)
        if n2 == '=': return self._get(n1) == self._get(n3)
        if n2 == '<': return self._get(n1) < self._get(n3)
    def _if(self, n1, n2, n3, n4):
        if self._cmp(n1, n2, n3):
            self._pc = self._labels[n4] - 1
    def _goto(self, n1):
        self._pc = self._labels[n1] - 1
    def exec(self):
        print('running...')
        cycle = 0
        try:
            while self._pc < len(self._exec):
                cycle += 1
                self._exec[self._pc]()
                self._pc += 1
        except (Exception, KeyboardInterrupt) as e:
            print('ERROR: exec() stoped:', e.__class__.__name__, e)
            print('cycle:', cycle, 'pc:', self._pc)
            print(self._vars)
            return
        print('done, cycle:', cycle)
        print(self._vars)
import pickle, sys; sys.modules['ast_execute'] = sys.modules['__main__']; f = open('$0', 'rb'); f.seek(________); env = pickle.load(f); f.close(); env.exec(); sys.exit(0)
"
exit 0
######
"""
LOADER = LOADER.replace('________', '%8d' % len(LOADER))

try:
    with open(sys.argv[2], 'wb') as f:
        f.write(LOADER.encode())
        pickle.dump(env, f, pickle.HIGHEST_PROTOCOL)
except Exception as e:
    print("ERROR: write to output_file failed:", e.__class__.__name__, e)
    sys.exit(1)

