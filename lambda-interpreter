#!/usr/bin/env python3

import sys

from scanner import get_scanner
from parser import get_parser, parse, dump_ast
from ast_execute import InterpreterEnv

if len(sys.argv) != 2:
    print("Usage:", sys.argv[0], "<input_file>")
    sys.exit(1)

scanner_tuple = get_scanner()
parser_tuple = get_parser()

source_code = ""
try:
    with open(sys.argv[1], 'r') as f:
        source_code = f.read()
except Exception as e:
    print("ERROR: read from input_file failed:", e.__class__.__name__, e)
    sys.exit(1)


# AST is a function contains a "function object tree", which bind with the input
AST = parse(scanner_tuple, parser_tuple, source_code)
if not AST:
    print("ERROR: parse failed, abort")
    sys.exit(1)


# the env object is a method set and environment for intermediate-code generation
env = InterpreterEnv()

# call AST with env
try:
    env.receive(AST(env=env))
except Exception as e:
    print("ERROR: runable function list gererate failed:", e.__class__.__name__, e)
    sys.exit(1)

# run in env(VM)
env.exec()
